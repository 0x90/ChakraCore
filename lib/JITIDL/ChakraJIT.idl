//-------------------------------------------------------------------------------------------------------
// Copyright (C) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE.txt file in the project root for full license information.
//-------------------------------------------------------------------------------------------------------

import "wtypes.idl";

typedef struct CallSiteData
{
    unsigned short bitFields;
    unsigned short returnType;
    unsigned int ldFldInlineCacheId;
    unsigned int sourceId;
    unsigned int functionId;
} CallSiteData;

typedef struct ThisData
{
    unsigned short valueType;
    byte thisType;
} ThisData;

typedef struct FldData
{
    unsigned short valueType;
    byte flags;
    byte polymorphicInlineCacheUtilization;
} FldData;

typedef struct ArrayCallSiteData
{
    byte bits;
    unsigned int functionNumber;
    unsigned short callSiteNumber;
} ArrayCallSiteData;

typedef struct LdElemData
{
    unsigned short arrayType;
    unsigned short elemType;
    byte bits;
} LdElemData;

typedef struct StElemData
{
    unsigned short arrayType;
    byte bits;
} StElemData;

typedef struct ProfileData
{
    int flags;

    unsigned short profiledLdElemCount;
    [size_is(profiledLdElemCount)] LdElemData * ldElemData;

    unsigned short profiledStElemCount;
    [size_is(profiledStElemCount)] StElemData * stElemData;

    unsigned short profiledArrayCallSiteCount;
    [size_is(profiledArrayCallSiteCount)] ArrayCallSiteData * arrayCallSiteData;

    // TODO: michhol OOP JIT, share counts with body
    unsigned int inlineCacheCount;
    [size_is(inlineCacheCount)] FldData * fldData;

    unsigned short profiledCallSiteCount;
    [size_is(profiledCallSiteCount)] CallSiteData * callSiteData;

    unsigned short profiledReturnTypeCount;
    [size_is(profiledReturnTypeCount)] unsigned short * returnTypeData;

    unsigned short profiledDivOrRemCount;
    [size_is(profiledDivOrRemCount)] unsigned short * divideTypeInfo;

    unsigned short profiledSwitchCount;
    [size_is(profiledSwitchCount)] unsigned short * switchTypeInfo;

    unsigned short profiledInParamsCount;
    [size_is(profiledInParamsCount)] unsigned short * parameterInfo;

    unsigned int loopCount;
    [size_is(loopCount)] byte * loopImplicitCallFlags;

    ThisData thisData;

    byte implicitCallFlags;

} ProfileData;

typedef struct ThreadContextData
{
    __int3264 nullFrameDisplayAddr;
    __int3264 strictNullFrameDisplayAddr;
} ThreadContextData;

typedef struct ScriptContextData
{
    __int3264 nullAddr;
    __int3264 undefinedAddr;
    __int3264 trueAddr;
    __int3264 falseAddr;
} ScriptContextData;

typedef struct SmallSpanSequenceData
{
    int baseValue;
    unsigned int statementLength;
    [size_is(statementLength)] unsigned int * statementBuffer;
    unsigned int actualOffsetLength; // REVIEW: are lengths the same?
    [size_is(actualOffsetLength)] unsigned int * actualOffsetList;
} SmallSpanSequenceData;

// FunctionBody fields, read only in JIT
typedef struct FunctionBodyJITData
{
    unsigned int byteCodeLength;
    [size_is(byteCodeLength)] byte * byteCodeBuffer;

    unsigned int constCount;
    [size_is(constCount)] __int3264 * constTable;
    [size_is(constCount)] int * constTypeTable; // TODO: not needed for asm.js

    unsigned int inlineCacheCount;
    [size_is(inlineCacheCount)] int * cacheIdToPropertyIdMap;
    [size_is(inlineCacheCount)] __int3264 * inlineCaches;

    SmallSpanSequenceData statementMap;
    unsigned int funcNumber;
    unsigned int localFuncId;
    unsigned int sourceContextId;
    unsigned int nestedCount;
    unsigned int scopeSlotArraySize;
    unsigned int attributes;
    unsigned int byteCodeCount;
    unsigned int byteCodeInLoopCount;
    unsigned int nonLoadByteCodeCount;
    unsigned int loopCount;
    unsigned int localFrameDisplayReg;
    unsigned int localClosureReg;
    unsigned int envReg;
    unsigned int firstTmpReg;
    unsigned int firstInnerScopeReg;
    unsigned int varCount;
    unsigned int innerScopeCount;
    unsigned int thisRegisterForEventHandler;
    unsigned int funcExprScopeRegister;

    unsigned short envDepth;
    unsigned short profiledCallSiteCount;
    unsigned short inParamCount;

    byte flags;
    // TODO: compress booleans into flags
    boolean doBackendArgumentsOptimization;
    boolean isLibraryCode;
    boolean isAsmJsMode;
    boolean hasImplicitArgIns;
    boolean isStrictMode;
    boolean hasScopeObject;
    boolean hasCachedScopePropIds;

} FunctionBodyJITData;

// EntryPointInfo fields, read/write in JIT
typedef struct EntryPointInfoJITWriteData
{
    int localVarSlotsOffset; // FunctionEntryPointInfo only
    int localVarChangedOffset; // FunctionEntryPointInfo only
    boolean hasJittedStackClosure;
} EntryPointInfoJITWriteData;

// EntryPointInfo fields, read only in JIT
typedef struct EntryPointInfoJITReadData
{
    __int3264 callsCountAddress; // // FunctionEntryPointInfo only
} EntryPointInfoJITReadData;

// CodeGenWorkItem fields, read only in JIT
typedef struct CodeGenWorkItemJITData
{
    EntryPointInfoJITReadData readOnlyEPData;
    FunctionBodyJITData bodyData;
    unsigned int interpretedCount;
    unsigned int loopNumber;
    unsigned int nameLength;
    [size_is(nameLength)] wchar_t * displayName;
    byte type;
    char jitMode;
    boolean isJitInDebugMode;  // Whether JIT is in debug mode for this work item.
} CodeGenWorkItemJITData;

// Fields that JIT modifies
typedef struct JITOutputData
{
    EntryPointInfoJITWriteData writeableEPData;
} JITOutputData;

[
    uuid(ead694ed-2243-44cb-a9dc-85d3ba934dab),
    pointer_default(unique)
]
interface IChakraJIT
{
    HRESULT Shutdown([in] handle_t binding);

    HRESULT InitializeThreadContext(
        [in] handle_t binding,
        [in] ThreadContextData * threadData,
        [out] __int3264 * threadContextInfoAddress);

    HRESULT CleanupThreadContext(
        [in] handle_t binding,
        [in] __int3264 threadContextInfoAddress);

    HRESULT InitializeScriptContext(
        [in] handle_t binding,
        [in] ScriptContextData * scriptContextData,
        [out] __int3264 * scriptContextInfoAddress);

    HRESULT CleanupScriptContext(
        [in] handle_t binding,
        [in] __int3264 scriptContextInfoAddress);

    HRESULT RemoteCodeGen(
        [in] handle_t binding,
        [in] __int3264 threadContextInfoAddress,
        [in] __int3264 scriptContextInfoAddress,
        [in] CodeGenWorkItemJITData * workItemData,
        [out] JITOutputData * jitData);

}
